#!/usr/bin/python3

import asyncio
import struct
from cougarnet.sim.host import BaseHost

class Switch(BaseHost):
    def __init__(self):
        super().__init__()
        self.mac_table = {}  # MAC address table
        self.aging_time = 8  # 8 seconds aging time

    def _handle_frame(self, frame: bytes, intf: str) -> None:
        dst_mac = frame[:6]
        src_mac = frame[6:12]
        
        # Update MAC table
        self.mac_table[src_mac] = (intf, asyncio.get_event_loop().time())
        
        # Handle VLANs (for Scenario 3)
        vlan_id = self.int_to_vlan.get(intf, 0)  # Default to VLAN 0 if not specified
        if self.is_trunk_link(intf):
            if frame[12:14] == b'\x81\x00':  # 802.1Q VLAN tag
                vlan_id = struct.unpack('!H', frame[14:16])[0] & 0x0FFF
                frame = frame[:12] + frame[16:]  # Remove VLAN tag

        # Determine outgoing interfaces
        if dst_mac == b'\xff\xff\xff\xff\xff\xff':  # Broadcast
            out_intfs = self._get_vlan_interfaces(vlan_id, exclude_intf=intf)
        elif dst_mac in self.mac_table:
            out_intf, _ = self.mac_table[dst_mac]
            if self.int_to_vlan.get(out_intf, 0) == vlan_id or self.is_trunk_link(out_intf):
                out_intfs = [out_intf]
            else:
                out_intfs = []
        else:  # Unknown unicast
            out_intfs = self._get_vlan_interfaces(vlan_id, exclude_intf=intf)

        # Forward frame
        for out_intf in out_intfs:
            self._send_frame(frame, out_intf, vlan_id)

    def _get_vlan_interfaces(self, vlan_id, exclude_intf=None):
        return [intf for intf in self.interfaces 
                if (self.int_to_vlan.get(intf, 0) == vlan_id or self.is_trunk_link(intf)) 
                and intf != exclude_intf]

    def _send_frame(self, frame, out_intf, vlan_id):
        if self.is_trunk_link(out_intf):
            # Add VLAN tag for trunk links
            vlan_tag = struct.pack('!H', 0x8100) + struct.pack('!H', vlan_id)
            frame = frame[:12] + vlan_tag + frame[12:]
        self.send_frame(frame, out_intf)

    async def _clean_mac_table(self):
        while True:
            current_time = asyncio.get_event_loop().time()
            expired = [mac for mac, (_, timestamp) in self.mac_table.items()
                       if current_time - timestamp > self.aging_time]
            for mac in expired:
                del self.mac_table[mac]
            await asyncio.sleep(1)  # Check every second

    def run(self):
        asyncio.get_event_loop().create_task(self._clean_mac_table())
        super().run()

def main():
    switch = Switch()
    switch.run()

if __name__ == '__main__':
    main()
